/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package econometrica_GUI;

import Connections.CountryDataLst;
import Connections.DBManager;
import Connections.DataSet;
import Connections.JPA;
import Connections.MyOkHttp;
import Connections.ReadCSVFile;
import Database.Country;
import Database.CountryData;
import Database.CountryDataset;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Μπορότης Βασίλειος
 * @author Ντουλάκης Ευστράτιος
 * @author Ντάφος Χρήστος
 */

public class MainForm extends javax.swing.JFrame {

//    private MainForm thisFrame;
DecimalFormat df1 = new DecimalFormat("#.########");
DecimalFormat df2 = new DecimalFormat("#.#");
    /**
     * Creates new form 
     */
    public MainForm() {

        read = new ReadCSVFile();
        read.ReadCSVFile();
        
        initComponents();

    this.GDP_EndDate.setEditable(false); 
    this.OIL_EndDate.setEditable(false); 
    this.GDP_StartDate.setEditable(false); 
    this.OIL_StartDate.setEditable(false); 
    this.GDP_DBName.setEditable(false); 
    this.OIL_DBName.setEditable(false); 
    this.jTableGDP.setEnabled(false); 
    this.jTableOIL.setEnabled(false); 
    this.AlreadySaved.setEnabled(false); 
    
    // Fill up Countries List    
        for (int i=1; i< read.getName().size(); i++) {
             CountrySelect.addItem((String) read.getName().get(i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_header = new javax.swing.JPanel();
        SelectCountry = new javax.swing.JLabel();
        CountrySelect = new javax.swing.JComboBox<>();
        FetchData = new javax.swing.JButton();
        jPanel_footer = new javax.swing.JPanel();
        DeleteAll = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Plot = new javax.swing.JButton();
        AlreadySaved = new javax.swing.JCheckBox();
        jPanel_main = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableOIL = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableGDP = new javax.swing.JTable();
        GDP_Data_lab = new javax.swing.JLabel();
        OIL_DBName_lab = new javax.swing.JLabel();
        OIL_Data_lab = new javax.swing.JLabel();
        GDP_DBName_lab = new javax.swing.JLabel();
        OIL_DBName = new javax.swing.JTextField();
        GDP_DBName = new javax.swing.JTextField();
        OIL_AvailTime_lab = new javax.swing.JLabel();
        GDP_AvailTime_lab = new javax.swing.JLabel();
        OIL_StartDt_lab = new javax.swing.JLabel();
        OIL_EndDt_lab = new javax.swing.JLabel();
        GDP_StartDt_lab = new javax.swing.JLabel();
        GDP_EndDt_lab = new javax.swing.JLabel();
        OIL_StartDate = new javax.swing.JTextField();
        OIL_EndDate = new javax.swing.JTextField();
        GDP_StartDate = new javax.swing.JTextField();
        GDP_EndDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Econometrica");
        setName("MainForm"); // NOI18N

        SelectCountry.setText("Select Country:");

        CountrySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountrySelectActionPerformed(evt);
            }
        });

        FetchData.setText("Fetch Data");
        FetchData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FetchDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_headerLayout = new javax.swing.GroupLayout(jPanel_header);
        jPanel_header.setLayout(jPanel_headerLayout);
        jPanel_headerLayout.setHorizontalGroup(
            jPanel_headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_headerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_headerLayout.createSequentialGroup()
                        .addComponent(CountrySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FetchData, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SelectCountry))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_headerLayout.setVerticalGroup(
            jPanel_headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_headerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SelectCountry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CountrySelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FetchData, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(432, 432, 432))
        );

        DeleteAll.setText("Delete ALL");
        DeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Plot.setText("Plot");
        Plot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotActionPerformed(evt);
            }
        });

        AlreadySaved.setText("Already Saved to Database");
        AlreadySaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlreadySavedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_footerLayout = new javax.swing.GroupLayout(jPanel_footer);
        jPanel_footer.setLayout(jPanel_footerLayout);
        jPanel_footerLayout.setHorizontalGroup(
            jPanel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_footerLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Plot, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DeleteAll)
                .addGap(34, 34, 34)
                .addComponent(AlreadySaved, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel_footerLayout.setVerticalGroup(
            jPanel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_footerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Plot)
                    .addComponent(DeleteAll)
                    .addComponent(AlreadySaved)
                    .addComponent(Save))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTableOIL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Year", "Value"
            }
        ));
        jScrollPane1.setViewportView(jTableOIL);

        jTableGDP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Year", "Value"
            }
        ));
        jScrollPane4.setViewportView(jTableGDP);

        GDP_Data_lab.setText("GDP DATA");

        OIL_DBName_lab.setText("Dataset Name:");

        OIL_Data_lab.setText("OIL DATA");

        GDP_DBName_lab.setText("Dataset Name:");

        OIL_DBName.setText(" ");

        GDP_DBName.setText(" ");
        GDP_DBName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GDP_DBNameActionPerformed(evt);
            }
        });

        OIL_AvailTime_lab.setText("Available Timespan:");

        GDP_AvailTime_lab.setText("Available Timespan:");

        OIL_StartDt_lab.setText("Start Date:");

        OIL_EndDt_lab.setText("End Date:");

        GDP_StartDt_lab.setText("Start Date:");

        GDP_EndDt_lab.setText("End Date:");

        OIL_StartDate.setText(" ");
        OIL_StartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OIL_StartDateActionPerformed(evt);
            }
        });

        OIL_EndDate.setText(" ");

        GDP_StartDate.setText(" ");

        GDP_EndDate.setText(" ");

        javax.swing.GroupLayout jPanel_mainLayout = new javax.swing.GroupLayout(jPanel_main);
        jPanel_main.setLayout(jPanel_mainLayout);
        jPanel_mainLayout.setHorizontalGroup(
            jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_mainLayout.createSequentialGroup()
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OIL_DBName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OIL_AvailTime_lab)
                    .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OIL_Data_lab, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(OIL_DBName_lab, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_mainLayout.createSequentialGroup()
                            .addComponent(OIL_EndDt_lab)
                            .addGap(24, 24, 24)
                            .addComponent(OIL_EndDate, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_mainLayout.createSequentialGroup()
                            .addComponent(OIL_StartDt_lab)
                            .addGap(18, 18, 18)
                            .addComponent(OIL_StartDate))))
                .addGap(18, 18, 18)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_mainLayout.createSequentialGroup()
                        .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_mainLayout.createSequentialGroup()
                                .addComponent(GDP_StartDt_lab)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel_mainLayout.createSequentialGroup()
                                .addComponent(GDP_EndDt_lab)
                                .addGap(24, 24, 24)))
                        .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GDP_EndDate, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(GDP_StartDate)))
                    .addComponent(GDP_AvailTime_lab)
                    .addComponent(GDP_DBName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GDP_DBName_lab)
                    .addComponent(GDP_Data_lab)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_mainLayout.setVerticalGroup(
            jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_mainLayout.createSequentialGroup()
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OIL_Data_lab)
                    .addComponent(GDP_Data_lab))
                .addGap(9, 9, 9)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(GDP_DBName_lab, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(OIL_DBName_lab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OIL_DBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GDP_DBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OIL_AvailTime_lab)
                    .addComponent(GDP_AvailTime_lab))
                .addGap(18, 18, 18)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OIL_StartDt_lab)
                    .addComponent(GDP_StartDt_lab)
                    .addComponent(OIL_StartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GDP_StartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OIL_EndDt_lab)
                    .addComponent(OIL_EndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GDP_EndDt_lab)
                    .addComponent(GDP_EndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(60, 60, 60))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel_footer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel_main, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_header, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel_main, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("MainForm");
        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FetchDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FetchDataActionPerformed
        // TODO add your handling code here:
        // Αν υπάρχει εγγραφή στην βάση τότε ενημερώνεται η φόρμα από την εγγραφή
        // της βάσης στα κατάλληλα πεδία, διαφορετικά γίνεται ανάκληση του http 
        // για λήψη δεδομένων.
        
        EntityManager em = DBManager.getEm(); // Δημιουργία Entity Manager
        DefaultTableModel modelGDP = (DefaultTableModel) jTableGDP.getModel(); // Δημιουργία διαχειριστή
        DefaultTableModel modelOIL = (DefaultTableModel) jTableOIL.getModel(); // ALV layout
        // Initiation of display data fields
        this.GDP_EndDate.setText("");
        this.OIL_EndDate.setText("");
        this.GDP_StartDate.setText("");
        this.OIL_StartDate.setText("");
        this.GDP_DBName.setText("");
        this.OIL_DBName.setText("");
        // Initialization of model structures for ALV lists management
        modelGDP.setNumRows(0);
        modelOIL.setNumRows(0);

        country = new Country();                  // Δημιουργία entity country
        countryDatasetGDP = new CountryDataset(); // Δημιουργία entity countryDataset
        countryDatasetOIL = new CountryDataset(); // Δημιουργία entity countryDataset
        countryDataGDPst = new CountryDataLst(); // Δημιουργία λίστας entity countryData
        countryDataOILst = new CountryDataLst(); // Δημιουργία λίστας entity countryData
        countryDatasetLst = new ArrayList();
         
        //Ξεκινάμε να αναζητούμε στην βάση αν υπάρχει η χώρα.         
         if (JPA.retreiveCountry((String) CountrySelect.getSelectedItem()) != null) {
             // The country already exist into the DataBase
             // Η χώρα υπάρχει οπότε ενημερώνουμε το attribute country
             Save.setEnabled(false);
             AlreadySaved.setEnabled(true);
             country = JPA.retreiveCountry((String) CountrySelect.getSelectedItem()); // Ανάκτηση country από την βάση
             // Ελέγχουμε αν υπάρχουν dataSets σχετικά με την χώρα 
             if (JPA.retreiveDataset(country, "GDP").getCountryCode() != null) {   
                 countryDatasetGDP = JPA.retreiveDataset(country, "GDP");  // Ανάθεση της dataset της χωρας στην dataset GDP
                   GDP_DBName.setText(countryDatasetGDP.getName()); // καθώς και τα πεδία της φόρμας name
                   GDP_StartDate.setText(countryDatasetGDP.getStartYear()+"-12-31"); // start date
                   GDP_EndDate.setText(countryDatasetGDP.getEndYear()+"-12-31"); // end date 
                   
                   countryDataGDPst = (CountryDataLst) JPA.retreiveDataLst(countryDatasetGDP);
                // Ελέγχω αν τα country data του dataset GDP έχουν δεδομένα
                if (countryDataGDPst.getLst().size()>0) {
                    modelGDP.setNumRows(countryDataGDPst.getLst().size());
                    }  // θέτω το size του ALV ανάλογα
                   for (int i=0; i < countryDataGDPst.getLst().size();i++) {
                        jTableGDP.setValueAt(countryDataGDPst.getLst().get(i).getDataYear(),i , 0); // θέτω έτος και αξία 
                        jTableGDP.setValueAt(countryDataGDPst.getLst().get(i).getValue(), i, 1); // στα αντικείμενα της φόρμας
                   }
             } 
             if (JPA.retreiveDataset(country, "Oil").getCountryCode() != null) {
                 countryDatasetOIL = JPA.retreiveDataset(country, "Oil");  // Ανάθεση της dataset της χωρας στην dataset OIL
                   OIL_DBName.setText(countryDatasetOIL.getName()); // καθώς και τα πεδία της φόρμας name
                   OIL_StartDate.setText(countryDatasetOIL.getStartYear()+"-12-31"); // start date
                   OIL_EndDate.setText(countryDatasetOIL.getEndYear()+"-12-31"); // end date

                   countryDataOILst = (CountryDataLst) JPA.retreiveDataLst(countryDatasetOIL);
                // Ελέγχω αν τα country data του dataset GDP έχουν δεδομένα
                if (countryDataOILst.getLst().size()>0) {
                    modelOIL.setNumRows(countryDataOILst.getLst().size());
                    } // θέτω το size του ALV ανάλογα
                   for (int i=0; i < countryDataOILst.getLst().size();i++) {
                        jTableOIL.setValueAt(countryDataOILst.getLst().get(i).getDataYear(),i , 0); // θέτω έτος και αξία 
                        jTableOIL.setValueAt(countryDataOILst.getLst().get(i).getValue(), i, 1); // στα αντικείμενα της φόρμας
                   }
             }
             if(!AlreadySaved.isSelected()==true){
                AlreadySaved.setEnabled(true);
                AlreadySaved.doClick();
                AlreadySaved.setEnabled(false);
             }
             Save.setSelected(false);
             this.revalidate(); // κάνω refrest στην φορμα
         } else {               // Αν τα δεδομένα δεν ειναι αποθηκευμενα στην βαση 
             Save.setEnabled(true);
             AlreadySaved.setEnabled(true);
             AlreadySaved.setSelected(false);
             // Set Object Country with values from the drop down lists and CSV file
             country.setName((String) CountrySelect.getSelectedItem());   // Αναθέτω στην κλάση - attribute country
             country.setIsoCode(read.getAlpha3Code(CountrySelect.getSelectedIndex()+1)); // τα πεδία ISO και name
             // Ανακτώ τα δεδομένα που αφορούν το GDP από το portal και τα αποθηκευω στο structure GDP
             MyOkHttp myHttpGDP = new MyOkHttp(country.getIsoCode(),"GDP");
                if (myHttpGDP.getProgress()== 4) {
                    System.out.println("myHttpOIL.getProgress() = " + myHttpGDP.getProgress());
                } else {
             GDP = myHttpGDP.getJsonGdp().getDataset();
             if (GDP.getDescription().contains("GDP")) {    
             // Ενημέρωση πεδίων της φόρμας - Set Description, StartDate, EndDate στην MainForm
                 GDP_DBName.setText(GDP.getName());
                 GDP_StartDate.setText(GDP.getStartDate());
                 GDP_EndDate.setText(GDP.getEndDate());
             // Ενημέρωση του countryDataset με δεδομένα από το portal
                 countryDatasetGDP.setCountryCode(country);               // θέτω country code
                 countryDatasetGDP.setDescription(GDP.getDescription());  // description
                 countryDatasetGDP.setName(GDP.getName());                // name
                 countryDatasetGDP.setStartYear(GDP.getStartDate().substring(0, 4)); // start date
                 countryDatasetGDP.setEndYear(GDP.getEndDate().substring(0, 4));  // end date
             // Εισάγω το countryDatasetGDP στην λίστα των countryDatasets
                 countryDatasetLst.add(countryDatasetGDP);
             // Ελέγχω αν τα country data του dataset GDP έχουν δεδομένα
                if (GDP.getData().size()>0) {
                    modelGDP.setRowCount(GDP.getData().size()); // θέτω το size του ALV ανάλογα
               for (int i=0; i< GDP.getData().size();i++) {     // Για το σύνολο του περιεχομένου του countryData
                     countryData = new CountryData();
                     jTableGDP.setValueAt(GDP.getData().get(i).get(0).toString().substring(0, 4), i, 0);
                     jTableGDP.setValueAt(df2.format(GDP.getData().get(i).get(1)), i, 1);
                     countryData.setDataYear(GDP.getData().get(i).get(0).toString().substring(0, 4)); // θέτω έτος  
                     countryData.setValue(df2.format(GDP.getData().get(i).get(1))); // , αξία και
                     countryData.setDataset(countryDatasetGDP); // dataSet object στην δομή countryData
                     countryDataGDPst.CountryDataLstAdd(countryData); // Εισάγω το περιεχόμενο της δομής countryData σε λίστα
                    };
                }
            }}
             MyOkHttp myHttpOIL = new MyOkHttp(country.getIsoCode(),"OIL");
                if (myHttpOIL.getProgress()== 4) {
                    System.out.println("myHttpOIL.getProgress() = " + myHttpOIL.getProgress());
                } else {
                 OIL = myHttpOIL.getJsonOil().getDataset();
                 if (OIL.getDescription().contains("Oil")) {
                     // Ενημέρωση πεδίων της φόρμας - Set Description, StartDate, EndDate στην MainForm
                     OIL_DBName.setText(OIL.getName());
                     OIL_StartDate.setText(OIL.getStartDate());
                     OIL_EndDate.setText(OIL.getEndDate());
                     // Ενημέρωση του countryDataset με δεδομένα από το portal
                     countryDatasetOIL.setCountryCode(country);               // θέτω country code
                     countryDatasetOIL.setDescription(OIL.getDescription());  // description
                     countryDatasetOIL.setName(OIL.getName());                // name
                     countryDatasetOIL.setStartYear(OIL.getStartDate().substring(0, 4)); // start date
                     countryDatasetOIL.setEndYear(OIL.getEndDate().substring(0, 4));  // end date
                     // Εισάγω το countryDatasetOIL στην λίστα των countryDatasets
                     countryDatasetLst.add(countryDatasetOIL);
                     // Ελέγχω αν τα country data του dataset OIL έχουν δεδομένα
                     if (OIL.getData().size()>0) {
                         modelOIL.setRowCount(OIL.getData().size()); // θέτω το size του ALV ανάλογα
                         for (int i=0; i< OIL.getData().size();i++) {     // Για το σύνολο του περιεχομένου του countryData
                             countryData = new CountryData();
                             jTableOIL.setValueAt(OIL.getData().get(i).get(0).toString().substring(0, 4), i, 0);
                             jTableOIL.setValueAt(df1.format(OIL.getData().get(i).get(1)), i, 1);
                             countryData.setDataYear(OIL.getData().get(i).get(0).toString().substring(0, 4)); // θέτω έτος
                             countryData.setValue(df1.format(OIL.getData().get(i).get(1))); // , αξία και
                             countryData.setDataset(countryDatasetOIL); // dataSet object στην δομή countryData
                             countryDataOILst.CountryDataLstAdd(countryData); // Εισάγω το περιεχόμενο της δομής countryData σε λίστα
                         };
                     }       
                }}
         }
                this.revalidate();  // Ενημερώνω την φόρμα
    }//GEN-LAST:event_FetchDataActionPerformed
    
    private void GDP_DBNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GDP_DBNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GDP_DBNameActionPerformed

    private void AlreadySavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlreadySavedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlreadySavedActionPerformed

    private void CountrySelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountrySelectActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_CountrySelectActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
         //Aν η χώρα δεν υπάρχει στην βάση. 
         em = DBManager.getEm();
         if (JPA.retreiveCountry((String) CountrySelect.getSelectedItem()) == null) {
             JPA.createCountry(country); // Αποθηκεύω την χώρα στην βάση                 
             for (int j=0; j< countryDatasetLst.size(); j++ ) {
                  JPA.createCountryDataset(countryDatasetLst.get(j));
                  if (countryDatasetLst.get(j).getName().contains("GDP")) {
                      for (int i=0; i< countryDataGDPst.getLst().size(); i++) {
                           JPA.createCountryDataInd(countryDataGDPst.getLst().get(i));
                           }
                      }// else {
                  if (countryDatasetLst.get(j).getName().contains("Oil")) {
                      for (int i=0; i< countryDataOILst.getLst().size(); i++) {
                           JPA.createCountryDataInd(countryDataOILst.getLst().get(i));
                           }
                      }
                } 
                AlreadySaved.setEnabled(true);
                AlreadySaved.doClick();
                AlreadySaved.setEnabled(false);
                Save.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Τα δεδομένα αποθηκεύτηκαν στη Βάση Δεδεομένων.");
            } 
        this.revalidate();  // Ενημερώνω την φόρμα 
    }//GEN-LAST:event_SaveActionPerformed

    private void PlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlotActionPerformed
        // TODO add your handling code here:

        PlotPanel jfc;
        try {
//            jfc = new PlotPanel(country.getName());
            jfc = new PlotPanel((String) CountrySelect.getSelectedItem());
            jfc.setVisible(true);
            jfc.pack();
        RefineryUtilities.centerFrameOnScreen(jfc);
        } catch (ParseException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PlotActionPerformed

    private void DeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllActionPerformed
        // TODO add your handling code here:
        int verify = JOptionPane.showConfirmDialog(rootPane, "Είσαι βέβαιος για τη διαγραφή;");
        if(verify == JOptionPane.NO_OPTION)
            System.exit(0);
        if (verify == JOptionPane.YES_OPTION) {
            try {
                 JPA.removeAllCountries();
                 DefaultTableModel modelGDP = (DefaultTableModel) jTableGDP.getModel(); // Δημιουργία διαχειριστή
                 DefaultTableModel modelOIL = (DefaultTableModel) jTableOIL.getModel(); // ALV layout
                 GDP_DBName.setText("");
                 GDP_StartDate.setText("");
                 GDP_EndDate.setText("");
                 
                 OIL_DBName.setText("");
                 OIL_StartDate.setText("");
                 GDP_EndDate.setText("");
                 
                 modelGDP.setRowCount(0);
                 modelOIL.setRowCount(0);
                 
                 if(AlreadySaved.isSelected()==true){
                    AlreadySaved.setEnabled(true);
                    AlreadySaved.doClick();
                    AlreadySaved.setEnabled(false);
                   }
            JOptionPane.showMessageDialog(null, "Τα δεδομένα διαγράφηκαν");
                } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Τα δεδομένα δεν διαγράφηκαν");
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_DeleteAllActionPerformed

    private void OIL_StartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OIL_StartDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OIL_StartDateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AlreadySaved;
    private javax.swing.JComboBox<String> CountrySelect;
    private javax.swing.JButton DeleteAll;
    private javax.swing.JButton FetchData;
    private javax.swing.JLabel GDP_AvailTime_lab;
    private javax.swing.JTextField GDP_DBName;
    private javax.swing.JLabel GDP_DBName_lab;
    private javax.swing.JLabel GDP_Data_lab;
    private javax.swing.JTextField GDP_EndDate;
    private javax.swing.JLabel GDP_EndDt_lab;
    private javax.swing.JTextField GDP_StartDate;
    private javax.swing.JLabel GDP_StartDt_lab;
    private javax.swing.JLabel OIL_AvailTime_lab;
    private javax.swing.JTextField OIL_DBName;
    private javax.swing.JLabel OIL_DBName_lab;
    private javax.swing.JLabel OIL_Data_lab;
    private javax.swing.JTextField OIL_EndDate;
    private javax.swing.JLabel OIL_EndDt_lab;
    private javax.swing.JTextField OIL_StartDate;
    private javax.swing.JLabel OIL_StartDt_lab;
    private javax.swing.JButton Plot;
    private javax.swing.JButton Save;
    private javax.swing.JLabel SelectCountry;
    private javax.swing.JPanel jPanel_footer;
    private javax.swing.JPanel jPanel_header;
    private javax.swing.JPanel jPanel_main;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableGDP;
    private javax.swing.JTable jTableOIL;
    // End of variables declaration//GEN-END:variables
    private DataSet OIL;
    private DataSet GDP;
//    private FetchData JsonGdp;
    private Country country;
    private CountryDataLst countryDataGDPst;
    private CountryDataLst countryDataOILst;
    private CountryData countryData;
    private CountryDataset countryDatasetGDP;
    private CountryDataset countryDatasetOIL;
    private List<CountryDataset> countryDatasetLst;
//    private countryDatasetLst countryDatasetLst;
    private EntityManager em;
    private ReadCSVFile read;
}
